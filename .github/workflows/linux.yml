name: linux

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and analyze
    
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    env:
      # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
      BUILD_TYPE: Debug
      BUILD_WRAPPER_OUT_DIR: ${{github.workspace}}/build/.sonar/build-wrapper-output
      GCOV_REPORT_DIR: ${{github.workspace}}/build/.coverage

    steps:
    - uses: actions/checkout@v3

    - name: Install sonar-scanner and build-wrapper
      uses: SonarSource/sonarcloud-github-c-cpp@v1

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -S . -B ${{github.workspace}}/build \
          -D CMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build the library with the given configuration.
      # Wrap in Sonar build-wrapper for analysis later.
      run: |
        build-wrapper-linux-x86-64 --out-dir ${{env.BUILD_WRAPPER_OUT_DIR}} \
          cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure

    - name: Generate code coverage report
      # Use gcov to generate test coverage reports.
      # The $(find ..) step removes dependencies from the report, including GoogleTest.
      run: |
        mkdir -p ${{env.GCOV_REPORT_DIR}} && cd ${{env.GCOV_REPORT_DIR}} \
          && gcov \$(find ${{github.workspace}}/build -path */_deps/* -prune -o -name *.o) \
            --preserve-paths --source-prefix ${{github.workspace}}

    - name: Run sonar-scanner
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
      run: |
        sonar-scanner \
          -D sonar.cfamily.build-wrapper-output="${{env.BUILD_WRAPPER_OUT_DIR}}" \
          -D sonar.cfamily.gcov.reportsPath=${{env.GCOV_REPORT_DIR}}
